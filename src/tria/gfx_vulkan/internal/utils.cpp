#include "utils.hpp"

namespace tria::gfx::internal {

auto getVkErrStr(VkResult errCode) noexcept -> std::string {
#define ERRSTR(name)                                                                               \
  case VK_##name:                                                                                  \
    return "Vulkan error: " #name

  switch (errCode) {
  case VK_ERROR_INCOMPATIBLE_DRIVER:
    return "No compatible vulkan driver found";
    ERRSTR(NOT_READY);
    ERRSTR(TIMEOUT);
    ERRSTR(EVENT_SET);
    ERRSTR(EVENT_RESET);
    ERRSTR(INCOMPLETE);
    ERRSTR(ERROR_OUT_OF_HOST_MEMORY);
    ERRSTR(ERROR_OUT_OF_DEVICE_MEMORY);
    ERRSTR(ERROR_INITIALIZATION_FAILED);
    ERRSTR(ERROR_DEVICE_LOST);
    ERRSTR(ERROR_MEMORY_MAP_FAILED);
    ERRSTR(ERROR_LAYER_NOT_PRESENT);
    ERRSTR(ERROR_EXTENSION_NOT_PRESENT);
    ERRSTR(ERROR_FEATURE_NOT_PRESENT);
    ERRSTR(ERROR_TOO_MANY_OBJECTS);
    ERRSTR(ERROR_FORMAT_NOT_SUPPORTED);
    ERRSTR(ERROR_FRAGMENTED_POOL);
    ERRSTR(ERROR_UNKNOWN);
    ERRSTR(ERROR_OUT_OF_POOL_MEMORY);
    ERRSTR(ERROR_INVALID_EXTERNAL_HANDLE);
    ERRSTR(ERROR_FRAGMENTATION);
    ERRSTR(ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS);
    ERRSTR(ERROR_SURFACE_LOST_KHR);
    ERRSTR(ERROR_NATIVE_WINDOW_IN_USE_KHR);
    ERRSTR(SUBOPTIMAL_KHR);
    ERRSTR(ERROR_OUT_OF_DATE_KHR);
    ERRSTR(ERROR_INCOMPATIBLE_DISPLAY_KHR);
    ERRSTR(ERROR_VALIDATION_FAILED_EXT);
    ERRSTR(ERROR_INVALID_SHADER_NV);
    ERRSTR(ERROR_INCOMPATIBLE_VERSION_KHR);
    ERRSTR(ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT);
    ERRSTR(ERROR_NOT_PERMITTED_EXT);
    ERRSTR(ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT);
    ERRSTR(THREAD_IDLE_KHR);
    ERRSTR(THREAD_DONE_KHR);
    ERRSTR(OPERATION_DEFERRED_KHR);
    ERRSTR(OPERATION_NOT_DEFERRED_KHR);
    ERRSTR(PIPELINE_COMPILE_REQUIRED_EXT);
  default:
    return "Unknown vulkan error";

#undef ERRSTR
  }
}

} // namespace tria::gfx::internal
